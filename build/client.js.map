{"version":3,"file":"client.js","sourceRoot":"","sources":["../src/client.ts"],"names":[],"mappings":"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","sourcesContent":["import jsLogger from 'js-logger'\nimport nodeFetch from 'node-fetch'\nimport { rejectAfterTimeout } from './helpers'\nimport {\n  createSessionEndpoint,\n  CreateSessionParameters,\n  CreateSessionResponse,\n  Method,\n  ILogLevel,\n  ClientOptions,\n} from './api-endpoints'\nimport { pick } from './utils'\n\ntype QueryParams = Record<string, string | number | string[]> | URLSearchParams\n\nconst FACESIGN_URL = 'https://api.facefile.co'\n\nexport interface RequestParameters {\n  path: string\n  method: Method\n  query?: QueryParams\n  body?: Record<string, unknown>\n  auth?: string\n}\n\nclass Client {\n  #auth?: string\n  #timeoutMs = 10000\n  #facesignVersion = '2024-10-11'\n  #fetch = nodeFetch\n\n  public constructor (options?: ClientOptions) {\n    this.#auth = options?.auth\n    this.#timeoutMs = options?.timeoutMs ?? 10000\n\n    const consoleHandler = jsLogger.createDefaultHandler({\n      formatter: function (messages, context) {\n        // prefix each log message with a timestamp.\n        messages.unshift(`${context.level.name}:`)\n      },\n    })\n    jsLogger.setHandler(function (messages, context) {\n      consoleHandler(messages, context)\n    })\n\n    jsLogger.useDefaults()\n\n    if (options && options.logLevel) {\n      this.setLogLevel(options.logLevel)\n    } else {\n      jsLogger.setLevel(jsLogger.OFF)\n    }\n  }\n\n  private setLogLevel (logLevel: ILogLevel) {\n    switch (logLevel) {\n      case ILogLevel.DEBUG: {\n        jsLogger.setLevel(jsLogger.DEBUG)\n        break\n      }\n      case ILogLevel.TRACE: {\n        jsLogger.setLevel(jsLogger.TRACE)\n        break\n      }\n      case ILogLevel.INFO: {\n        jsLogger.setLevel(jsLogger.INFO)\n        break\n      }\n      case ILogLevel.TIME: {\n        jsLogger.setLevel(jsLogger.TIME)\n        break\n      }\n      case ILogLevel.WARN: {\n        jsLogger.setLevel(jsLogger.WARN)\n        break\n      }\n      case ILogLevel.ERROR: {\n        jsLogger.setLevel(jsLogger.ERROR)\n        break\n      }\n      case ILogLevel.OFF: {\n        jsLogger.setLevel(jsLogger.OFF)\n        break\n      }\n    }\n  }\n\n  private async request<ResponseBody> ({\n    path,\n    method,\n    query,\n    body,\n  }: RequestParameters): Promise<ResponseBody> {\n    jsLogger.log('request start', { method, path })\n\n    const bodyAsJsonString =\n      !body || Object.entries(body).length === 0\n        ? undefined\n        : JSON.stringify(body)\n\n    const url = new URL(`${FACESIGN_URL}${path}`)\n    jsLogger.log('endpoint url', url)\n    if (query) {\n      for (const [key, value] of Object.entries(query)) {\n        if (value !== undefined) {\n          if (Array.isArray(value)) {\n            value.forEach(val =>\n              url.searchParams.append(key, decodeURIComponent(val))\n            )\n          } else {\n            url.searchParams.append(key, String(value))\n          }\n        }\n      }\n    }\n\n    const headers: Record<string, string> = {\n      'Facesign-Version': this.#facesignVersion,\n    }\n\n    if (this.#auth) {\n      headers['authorization'] = `Bearer ${this.#auth}`\n    }\n\n    if (bodyAsJsonString !== undefined) {\n      headers['content-type'] = 'application/json'\n    }\n    try {\n      const response = await rejectAfterTimeout(\n        this.#fetch(url.toString(), {\n          method: method.toUpperCase(),\n          headers,\n          body: bodyAsJsonString,\n        }),\n        this.#timeoutMs\n      )\n\n      const responseText = await response.text()\n      if (!response.ok) {\n        jsLogger.error('request error', {\n          status: response.status,\n          statusText: response.statusText,\n          responseText,\n        })\n        throw new Error(responseText)\n      }\n\n      const responseJson: ResponseBody = JSON.parse(responseText)\n      jsLogger.log('request success', { method, path })\n      return responseJson\n    } catch (error: unknown) {\n      jsLogger.warn('request fail', {\n        error,\n      })\n\n      throw error\n    }\n  }\n\n  public readonly session = {\n    /**\n     * Create an identity verification session\n     */\n    create: (args: CreateSessionParameters): Promise<CreateSessionResponse> => {\n      return this.request<CreateSessionResponse>({\n        path: createSessionEndpoint.path(),\n        method: createSessionEndpoint.method,\n        query: pick(args, createSessionEndpoint.queryParams),\n        body: pick(args, createSessionEndpoint.bodyParams),\n      })\n    },\n  }\n}\n\nexport default Client\n"]}